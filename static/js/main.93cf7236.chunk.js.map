{"version":3,"sources":["Components/Navbar.js","Components/Card.js","Components/NavigationCard.js","Components/Jumbotron.js","Components/Directions.js","Components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","navArray","icon","navButton","this","map","button","idx","key","href","className","Fragment","id","React","Component","Card","cardStyle","border","menuItem","item_name","description","price","NavigationCard","label","cards","menuItems","filter","item","course","toLowerCase","onSelect","index","console","log","createTab","Jumbotron","notify","toast","src","position","POSITION","TOP_LEFT","sectionStyle","backgroundImage","jumboImg","backgroundPosition","backgroundRepeat","backgroundSize","style","isHeader","onClick","Directions","width","height","frameBorder","Table","scope","library","add","fab","faMapMarkerAlt","faUtensils","faClock","faPhone","faEnvelope","App","state","content","MenuNames","menu_names","axios","require","get","response","fullMenu","data","menu_items","localStorage","length","setItem","JSON","stringify","setState","getDescription","getMenu","parse","getItem","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93cf7236.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Navbar extends React.Component {\n   constructor(props) {\n      super(props);\n      this.navArray = [<h1>Trattoria al Trivisonno</h1>, <FontAwesomeIcon icon=\"utensils\" />, <FontAwesomeIcon icon=\"clock\" />, <FontAwesomeIcon icon=\"phone\" />, <FontAwesomeIcon icon=\"map-marker-alt\" />];\n   }\n\n   // --- Create Navigation bar with nav buttons --- //\n   render() {\n      let navButton = this.navArray.map((button, idx) =>\n         <a key={idx} href={\"#\" + idx} className=\"btn btn-light\">\n            <h3>{button}</h3>\n         </a>)\n\n      return (\n         <React.Fragment>\n            <nav className=\"navbar bg-light\" id=\"navbar\">\n               {navButton}\n            </nav>\n         </React.Fragment>\n      )\n   }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nclass Card extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.cardStyle = {\n         border: \"none\"\n      }\n   }\n\n   render() {\n      const { menuItem = {} } = this.props;\n      \n      return (\n         <React.Fragment>\n            <br></br>\n            <h3 className=\"fontQ\">{menuItem.item_name}</h3>\n            <h5 className=\"fontQ\">{menuItem.description}.......{menuItem.price}</h5> \n         </React.Fragment>\n      )\n   }\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\nimport { Tabs, Tab } from 'react-bootstrap-tabs';\nimport './NavigationCard.css';\n\nclass NavigationCard extends React.Component {\n\n   constructor(props) {\n      super(props);\n   }\n\n// --- Create tab, passing in the label name. Filter by name which corresponds to JSON 'course.' Map descriptions to card.  --- //\n   createTab(label) {\n      let cards =\n         this.props.menuItems\n            .filter(item => item.course === label.toLowerCase())\n            .map((item) => {\n               return <Card key={item.item_name} menuItem={item} />\n            })\n\n      return (\n         <Tab key={label} label={label}>\n            {cards}\n         </Tab>\n      )\n   }\n\n   render() {\n      return (\n         <React.Fragment>\n            <hr id=\"1\"></hr>\n            <h1 className=\"text-center\">Menu</h1>\n            <Tabs onSelect={(index, label) => console.log(label + ' selected')}>\n               {this.createTab('Antipasti')}\n               {this.createTab('Primi')}\n               {this.createTab('Secondi')}\n               {this.createTab('Formaggi')}\n               {this.createTab('Dolce')}\n            </Tabs>\n            <hr></hr>\n         </React.Fragment>\n      )\n   }\n}\n\nexport default NavigationCard;\n","import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Jumbotron extends React.Component {\n\n   constructor(props) {\n      super(props);\n      this.sectionStyle = {\n         backgroundImage: `url(${props.jumboImg})`,\n         backgroundPosition: \"center\",\n         backgroundRepeat: \"no-repeat\",\n         backgroundSize: \"cover\",\n      }\n   }\n\n   notify = () => toast(<img src=\"maitreD.gif\" />, {\n      position: toast.POSITION.TOP_LEFT\n   });\n\n   render() {\n      return (\n         <React.Fragment>\n            <div id=\"jumbotron\" className=\"jumbotron jumbotron-fluid\" style={this.sectionStyle}>\n               {this.props.isHeader == \"true\" &&\n                  <button className=\"btn btn-light btn-sm fontQ reservationButton\" onClick={this.notify}>\n                     <ToastContainer />\n                     Make A Reservation\n                  </button>\n               }\n            </div>\n         </React.Fragment>\n      )\n   }\n}\n\nexport default Jumbotron;\n","import React from 'react';\n\nclass Directions extends React.Component {\n\n   render() {\n\n      return (\n         <React.Fragment>\n            <br id=\"4\"></br>\n            <div className=\"text-center\">\n               <h4 className=\"text-center fontQ\">348 E. Main St, Lexington, KY</h4>\n               <iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d1571.1092867683901!2d-84.49247392754101!3d38.04199311562308!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x884244e844532c33%3A0xb6919957af36b713!2s348%20E%20Main%20St!5e0!3m2!1sen!2sus!4v1571858397159!5m2!1sen!2sus\" width=\"300px\" height=\"300px\" frameBorder=\"0\"></iframe>\n            </div>\n         </React.Fragment>\n      )\n   }\n}\n\nexport default Directions;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Table extends React.Component {\n\n   render() {\n      return (\n         <React.Fragment>\n            <div className=\"card-group\">\n               <div className=\"card\">\n                  <div className=\"card-body\">\n                     <h1 className=\"text-center\">Hours</h1>\n                     <table className=\"table text-center fontQ\">\n                        <tbody>\n                           <tr>\n                              <th scope=\"row\">Sunday</th>\n                              <td>6pm - 11pm</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Monday</th>\n                              <td>Closed</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Tuesday</th>\n                              <td>Closed</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Wednesday</th>\n                              <td>6pm - 12am</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Thursday</th>\n                              <td>6pm - 12am</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Friday</th>\n                              <td>6pm - 12am</td>\n                           </tr>\n                           <tr>\n                              <th scope=\"row\">Saturday</th>\n                              <td>6pm - 12am</td>\n                           </tr>\n                        </tbody>\n                     </table>\n                  </div>\n               </div>\n               <div className=\"card\" id=\"3\">\n                  <div className=\"card-body text-center\" id=\"contactCard\">\n                     <h1>Contact Us</h1>\n                     <img src=\"letterT.png\" width=\"100px\" className=\"m-4\" />\n                     <h3 className=\"fontQ\"><FontAwesomeIcon icon=\"phone\" /> 859.960.4600</h3>\n                     <h3 className=\"fontQ\"><FontAwesomeIcon icon=\"envelope\" /> info@awesomeinc.org</h3>\n                  </div>\n               </div>\n            </div>\n         </React.Fragment>\n      )\n   }\n}\n\nexport default Table;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faUtensils, faEnvelope } from '@fortawesome/free-solid-svg-icons'\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\nimport { faPhone } from '@fortawesome/free-solid-svg-icons'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Navbar from './Components/Navbar.js';\nimport NavigationCard from './Components/NavigationCard.js'\nimport Jumbotron from './Components/Jumbotron'\nimport Directions from './Components/Directions.js';\nimport Table from './Components/Table.js';\nimport MenuNames from './Menu.json';\n\nlibrary.add(fab, faMapMarkerAlt, faUtensils, faClock, faPhone, faEnvelope);\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: MenuNames.menu_names\n    }\n  }\n\n  // --- Get and Set API. Add API response to my JSON --- //\n  async getDescription() {\n    const axios = require('axios');\n    const response = await axios.get('https://entree-f18.herokuapp.com/v1/menu/15')\n    let fullMenu = this.state.content.map((item, idx) => {\n      item['description'] = response.data.menu_items[idx].description;\n      return item;\n    })\n\n  // --- Prevent page getting stuck loading when localStorage is empty --- //\n    { localStorage.length === 0 && localStorage.setItem('menu', JSON.stringify(fullMenu)); }\n\n    this.setState({\n      content: fullMenu\n    })\n  }\n\n  // --- Calls API once component mounts --- //\n  componentDidMount() {\n    this.getDescription();\n  }\n\n  // --- Parse the JSON. If response is present, populate the page, else show spinner --- //\n  render() {\n    const getMenu = JSON.parse(localStorage.getItem('menu'));\n    return this.state.content && localStorage.length > 0 ? (\n      <div className=\"App\">\n        <Navbar />\n        <Jumbotron jumboImg=\"trattoria.png\" isHeader=\"true\" />\n        <NavigationCard menuItems={getMenu} />\n        <Jumbotron jumboImg=\"wine_edit.jpg\" />\n        <hr id=\"2\"></hr>\n        <Table />\n        <Directions />\n      </div>\n    ) :\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}